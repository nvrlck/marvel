{"version":3,"file":"static/js/666.58ed78e9.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} />\r\n        <img style={{ display: 'block', wigth: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <li\n                    className='char__item'\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                    props.onCharSelected(item.id);\n                    focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className='char__name'>{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className='char__grid'>\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display' : charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true};\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1b7bb9470a3b204b94252361aa44f033';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    \r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n    \r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, getCharacterByName, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["style","display","wigth","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","charId","skeleton","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","selectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}